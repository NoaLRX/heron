heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
p <- demi_perimetre(a,b,c){
heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
p <- demi_perimetre(a,b,c)
if (p<0){
stop("le demi-paramètre doit être positif")
}
sqrt(p*(p-a)*(p-b)*(p-c))
}
a <- 1
b <- 2
c <- 3
heron(1,2,3)
heron <- function(a, b, c) {
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {
stop("Tous les arguments doivent être des nombres.")
}
if (a <= 0 || b <= 0 || c <= 0) {
stop("Aucune des valeurs ne peut être négative ou nulle.")
}
p <- demi_perimetre(a, b, c)
if (p <= 0) {
stop("Le demi périmètre doit être strictement positif.")
}
sqrt(p * (p - a) * (p - b) * (p - c))
}
heron(1,2,3)
heron2 <- function(a, b, c) {
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {
stop("Tous les arguments doivent être des nombres.")
}
if (a <= 0 || b <= 0 || c <= 0) {
stop("Aucune des valeurs ne peut être négative ou nulle.")
}
p <- demi_perimetre(a, b, c)
if (p <= 0) {
stop("Le demi périmètre doit être strictement positif.")
}
sqrt(p * (p - a) * (p - b) * (p - c))
}
heron2(1,2,3)
demi_perimetre <- function(a,b,c){
(a + b + c) / 2
}
heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
p <- demi_perimetre(a,b,c)
if (p<0){
stop("le demi-paramètre doit être positif")
}
sqrt(p*(p-a)*(p-b)*(p-c))
}
heron(1,2,3)
heron(99,2,3)
source("~/heron/R/heron.R", echo=TRUE)
heron(38,2,3)
heron(3,4,5)
#' Fonction demi-perimetre
#' @title demi-perimetre
#' @param a Longueur du côté a du triangle
#' @param b Longueur du côté b du triangle
#' @param c Longueur du côté c du triangle
#' @return
#' @noRd
demi_perimetre <- function(a,b,c){
(a + b + c) / 2
}
#' Fonction heron
#' @title heron
#' @param a Longueur du côté a du triangle
#' @param b Longueur du côté b du triangle
#' @param c Longueur du côté c du triangle
#'
#' @return
#' @export
#'
#' @examples
#' heron(1,2,3)
#' heron(4,5,6)
heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
p <- demi_perimetre(a,b,c)
if (p<0){
stop("le demi-paramètre doit être positif")
}
sqrt(p*(p-a)*(p-b)*(p-c))
}
heron(3,4,5)
#' Fonction demi-perimetre
#' @title demi-perimetre
#' @param a Longueur du côté a du triangle
#' @param b Longueur du côté b du triangle
#' @param c Longueur du côté c du triangle
#' @return
#' @noRd
demi_perimetre <- function(a,b,c){
(a + b + c) / 2
}
#' Fonction heron
#' @title heron
#' @param a Longueur du côté a du triangle
#' @param b Longueur du côté b du triangle
#' @param c Longueur du côté c du triangle
#'
#' @return
#' @export
#'
#' @examples
#' heron(1,2,3)
#' heron(4,5,6)
heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
p <- demi_perimetre(a,b,c)
if (p<0){
stop("le demi-paramètre doit être positif")
}
sqrt(p*(p-a)*(p-b)*(p-c))
}
library(testthat)
usethis::use_test()
heron(3, 4, 5)
heron(7, 24, 25)
heron(10, 9, 7)
heron(1,2,3)
heron(6,3,1)
heron(1,4,5)
heron(3,4,5)
heron(4,6,8)
test_that("La fonction heron renvoie les bonnes valeurs", {
expect_equal(heron(3, 4, 5), 6)
expect_equal(heron(7, 24, 25), 84)
expect_equal(heron(4, 6, 8), 11.61895)
})
test_that("Heron retourne une erreur pour des valeurs non-numeriques", {
expect_error(heron("lettre", 4, 5), "les paramètres doivent tous être de formes numériques")
expect_error(heron(3, "lettre", 5), "les paramètres doivent tous être de formes numériques")
expect_error(heron(3, 4, "lettre"), "les paramètres doivent tous être de formes numériques")
})
test_that("Heron retourne une erreur pour des valeurs qui ne sont pas positives", {
expect_error(heron(-3, 4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, -4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, 4, -5), "les paramètres doivent tous être > 0")
})
test_that("Heron retourne une erreur si une des valeurs est égales à 0", {
expect_error(heron(0, 4, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 0, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 4, 0), "Attention, au mois l'un des paramètres est égale à 0")
})
test_that("Heron retourne une erreur pour des valeurs qui ne sont pas positives", {
expect_error(heron(-3, 4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, -4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, 4, -5), "les paramètres doivent tous être > 0")
})
test_that("Heron retourne une erreur si une des valeurs est égales à 0", {
expect_error(heron(0, 4, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 0, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 4, 0), "Attention, au mois l'un des paramètres est égale à 0")
})
heron(0,4,5)
test_that("Heron retourne une erreur pour des valeurs qui ne sont pas positives", {
expect_error(heron(-3, 4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, -4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, 4, -5), "les paramètres doivent tous être > 0")
})
test_that("Heron retourne une erreur si une des valeurs est égales à 0", {
expect_error(heron(0, 4, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 0, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 4, 0), "Attention, au mois l'un des paramètres est égale à 0")
})
heron(1,0,1)
heron(1,2,0)
heron <- function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)){
stop("les paramètres doivent tous être de formes numériques")
}
if (a==0 | b==0 | c==0){
stop("Attention, au mois l'un des paramètres est égale à 0")
}
if (a<=0 || b<=0 || c<=0){
stop("les paramètres doivent tous être > 0")
}
p <- demi_perimetre(a,b,c)
if (p<0){
stop("le demi-paramètre doit être positif")
}
sqrt(p*(p-a)*(p-b)*(p-c))
}
heron(0,1,2)
test_that("La fonction heron renvoie les bonnes valeurs", {
expect_equal(heron(3, 4, 5), 6)
expect_equal(heron(7, 24, 25), 84)
expect_equal(heron(4, 6, 8), 11.61895)
})
test_that("Heron retourne une erreur pour des valeurs non-numeriques", {
expect_error(heron("lettre", 4, 5), "les paramètres doivent tous être de formes numériques")
expect_error(heron(3, "lettre", 5), "les paramètres doivent tous être de formes numériques")
expect_error(heron(3, 4, "lettre"), "les paramètres doivent tous être de formes numériques")
})
test_that("Heron retourne une erreur pour des valeurs qui ne sont pas positives", {
expect_error(heron(-3, 4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, -4, 5), "les paramètres doivent tous être > 0")
expect_error(heron(3, 4, -5), "les paramètres doivent tous être > 0")
})
test_that("Heron retourne une erreur si une des valeurs est égales à 0", {
expect_error(heron(0, 4, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 0, 5), "Attention, au mois l'un des paramètres est égale à 0")
expect_error(heron(3, 4, 0), "Attention, au mois l'un des paramètres est égale à 0")
})
#' Fonction demi-perimetre
#' @title demi-perimetre
#' @param a Longueur du côté a du triangle
#' @param b Longueur du côté b du triangle
#' @param c Longueur du côté c du triangle
#' @return
#' @noRd
demi_perimetre <- function(a,b,c){
(a + b + c) / 2
}
usethis::use_test()
demi_perimetre(1,2,3)
demi_perimetre(3,4,5)
demi_perimetre(39,384,3864)
demi_perimetre(3, 4, 5)
demi_perimetre(7, 24, 25)
demi_perimetre(4, 6, 8)
test_that("La fonction demi_perimetre renvoie les bonnes valeurs", {
expect_equal(demi_perimetre(3, 4, 5), 6)
expect_equal(demi_perimetre(7, 24, 25), 28)
expect_equal(demi_perimetre(4, 6, 8), 9)
})
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
